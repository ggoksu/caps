#!/bin/bash

root_dir=$(cd $(dirname $BASH_SOURCE)/.. && pwd)
source $root_dir/bin/common

usage () {
    echo -e "${BLUE}\nUSAGE: caps-init <NAME> -d|--deployment <DEPLOYMENT_NAME> -i|--iaas <IAAS_PROVIDER>\n"
    echo -e "    This utility will create a control file for a new environment in the repository root."
    echo -e "    This file will be named '.envrc-<NAME>'. Its format is compatible with the 'direnv'"
    echo -e "    (https://github.com/direnv/direnv) utility which is recommend for managing profiles"
    echo -e "    for multiple deployment environments. Running this script will terminate any"
    echo -e "    connected VPN sessions.\n"
    echo -e "    <NAME>                             The name of the environment. This will also be the name of your primary VPC."
    echo -e "    -d|--deployment <DEPLOYMENT_NAME>  The name of one of the deployment recipes."
    echo -e "    -i|--iaas <IAAS_PROVIDER>          The iaas provider that the deployment has been deployed to.\n"
}

case "$1" in
    -?|--help|help)
        usage
        exit 0
        ;;
    *)
        name=$1
        if [[ $(echo $name | cut -c1) == - ]]; then
            usage
            exit 1
        fi
        ;;
esac

shift
while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--debug)
            set -x
            ;;
        -d|--deployment)
            deployment_name=$2
            shift
            ;;
        -i|--iaas)
            iaas_provider=$2
            shift
            ;;
        *)
            usage
            exit 1
            ;;
    esac
    shift
done

if [[ -z $name || -z $deployment_name || -z $iaas_provider ]]; then
    usage
    exit 1
fi

common::set_working_dir
common::validate

# Disconnect all VPN connections (MacOS only)
os_type="$(uname -s)"
if [[ $os_type == Darwin ]]; then
    osascript -e 'tell application "Tunnelblick.app" to disconnect all' >/dev/null 2>&1
fi

workspace_path=$working_dir/.workspace/$name
mkdir -p $workspace_path

cat << ---EOF >$working_dir/.workspace/context
name=$name
deployment_name=$deployment_name
iaas_provider=$iaas_provider
---EOF

if [[ -e $working_dir/.caps-env_$name ]]; then
    echo -e "${GREEN}CAPs context initialized to $name."
    exit 0
fi

git remote -v >/dev/null 2>&1
if [[ $? -ne 0 ]]; then
    echo -e "\n${RED}ERROR: CAPs context should be initialized from within the"
    echo -e "${RED}       root of your environment configuration repository.\n"
    exit 1
fi

env_config_git_repo=$(git remote -v | awk '/(fetch)/{ print $2 }')
env_config_git_branch=$(git branch | awk '{ print $2 }')

mkdir -p $name/config
mkdir -p $name/templates/terraform
mkdir -p $name/templates/tile

cp $root_dir/deployments/$deployment_name/$iaas_provider/_init-tpl_/* $name/config
touch $name/templates/terraform/.keep
touch $name/templates/tile/.keep

#
# Create a control file for the new environment.
#
echo "Creating a control file for a new environment named: $name"

terraform_path=$root_dir/deployments/$deployment_name/$iaas_provider/terraform

vars_file=$terraform_path/vars.tf
if [[ ! -e $vars_file ]]; then
    echo -e "\nA 'var.tf' file was not found at the bootstrap template path.\n"
    echo -e "* $terraform_path\n" 
    echo -e "This file is required to determine the inputs for building"
    echo -e "the environment.\n"
    exit 1
fi
tf_vars=$(cat $vars_file | awk '/^variable /{ print substr($2,2,length($2)-2) }')

cat << ---EOF >$working_dir/.caps-env_$name
#!/bin/bash

#
# Environment variables required by Terraform 
# to bootstrap and install the PCF environment
#
---EOF

cnl=true
vnl=true
curr_var=""
var_type=""
def_val=""

while IFS='' read -r line || [[ -n "$line" ]]; do

    first_char=$(echo $line | cut -c1)
    if [[ "$first_char" == "#" && -z $curr_var ]]; then

        vnl=true
        [[ $cnl == true ]] && echo >>$working_dir/.caps-env_$name
        cnl=false

        [[ "${line% *}" == "#export" ]] && echo >>$working_dir/.caps-env_$name
        echo "$line" >>$working_dir/.caps-env_$name
        continue
    fi

    v=$(echo $line | awk '/^variable /{ print substr($2,2,length($2)-2) }')
    [[ -n $v ]] && curr_var=$v
    
    v=$(echo $line | awk -F'"' '/type[[:space:]]+=/{ print $2 }')
    [[ -n $v ]] && var_type=$v

    v=$(echo $line | awk -F'"' '/default/{ print $2 }')
    [[ -n $v ]] && def_val=$v

    if [[ "$first_char" == "}" && -n $curr_var ]]; then

        cnl=true
        [[ $vnl == true ]] && echo >>$working_dir/.caps-env_$name
        vnl=false

        case $curr_var in
            vpc_name)
                echo "export TF_VAR_$curr_var=$name" >>$working_dir/.caps-env_$name
                ;;
            bastion_admin_user)
                echo "export TF_VAR_$curr_var=bastion-admin" >>$working_dir/.caps-env_$name
                ;;
            bastion_setup_vpn)
                echo "export TF_VAR_$curr_var=false" >>$working_dir/.caps-env_$name
                ;;
            bastion_allow_public_ssh)
                echo "export TF_VAR_$curr_var=true" >>$working_dir/.caps-env_$name
                ;;
            ssh_key_file_path)
                echo "#export TF_VAR_$curr_var=$workspace_path" >>$working_dir/.caps-env_$name
                ;;
            *)
                if [[ $var_type != "list" && $var_type != "map" ]]; then
                    if [[ -n $curr_var && -n $def_val ]]; then
                        echo "#export TF_VAR_$curr_var=$def_val" >>$working_dir/.caps-env_$name
                    else
                        echo "export TF_VAR_$curr_var=" >>$working_dir/.caps-env_$name
                    fi
                else
                    cnl=false
                fi
                ;;
        esac

        unset curr_var
        unset var_type
        unset def_val
    fi
    
done < "$vars_file"

git add $name/config/*
git add --force $name/templates/terraform/.keep
git add --force $name/templates/tile/.keep
git add --force .caps-env_$name
git commit -m "created new caps environment $name"

echo -e "${GREEN}CAPs context initialized to $name."
