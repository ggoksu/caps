#!/bin/bash

WHITE='\033[1;37m'
BLACK='\033[0;30m'
RED='\033[0;31m'
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
DARK_GRAY='\033[1;30m'
BROWN_ORANGE='\033[0;33m'
LIGHT_GRAY='\033[0;37m'
LIGHT_RED='\033[1;31m'
LIGHT_GREEN='\033[1;32m'
LIGHT_BLUE='\033[1;34m'
LIGHT_PURPLE='\033[1;35m'
LIGHT_CYAN='\033[1;36m'
NC='\033[0m' # No Color

function common::set_working_dir() {

    working_dir=$(pwd)
    while [[ $working_dir != / ]]; do    
        if [[ -e $working_dir/.workspace ]]; then
            break
        fi
        working_dir=$(dirname $working_dir)
    done

    if [[ $working_dir == / ]]; then
        working_dir=$(pwd)
        mkdir -p $working_dir/.workspace    
    fi
}

function common::validate() {

    if [[ ! -e $root_dir/deployments/$deployment_name ]]; then
        echo -e "${RED}\nERROR! Deployment recipe does not exist.\n" 
        echo -e "${GREEN}Available deployments are:\n"
        for d in $(find $root_dir/deployments -type d -depth 1 -print); do 
            echo "- \"$(basename $d)\"" 
        done
        echo -e "${NC}"
        exit 1
    fi
    if [[ ! -e $root_dir/deployments/$deployment_name/$iaas_provider ]]; then
        echo -e "${RED}\nERROR! IAAS specific deployment recipe does not exist at:\n"
        echo -e "${GREEN}Available IAAS configurations for deployment \"$deployment_name\" are:\n"
        for d in $(find $root_dir/deployments/$deployment_name -type d -depth 1 -print); do 
            echo "- \"$(basename $d)\"" 
        done
        echo -e "${NC}"
        exit 1
    fi
    if [[ ! -e $root_dir/deployments/$deployment_name/$iaas_provider/terraform ]]; then
        echo -e "${RED}\nERROR! The deployment recipe does not seem to have a terraform template.${NC}\n"
        exit 1
    fi
}

function common::initialize() {

    common::set_working_dir

    # Read the current context
    [[ -e $working_dir/.workspace/context ]] && source $working_dir/.workspace/context
    if [[ -z $name || -z $deployment_name || -z $iaas_provider ]]; then
        echo -e "${RED}\nCurrent environment context has not be set. Please run 'caps-init'.${NC}"
        caps-init --help
        exit 1
    fi
    common::validate

    # Read the context control file
    source $working_dir/.caps-env_$name
    if [[ -z $TF_VAR_vpc_name || $TF_VAR_vpc_name != $name ]]; then 
        echo -e "${RED}\nThe 'TF_VAR_vpc_name' environment variable must be set with a"
        echo -e "unique name to identify this environment within you cloud account.${NC}"
        exit 1
    fi

    # Ensure context has been refreshed with remote state
    workspace_path=$working_dir/.workspace/$TF_VAR_vpc_name
    mkdir -p $workspace_path
}

function common::show_env() {

    echo -e "\n${LIGHT_GREEN}***********************"
    echo -e "${LIGHT_GREEN}* Environment Details *"
    echo -e "${LIGHT_GREEN}***********************\n"

    echo -e "${LIGHT_BLUE}Name: $name"
    echo -e "${LIGHT_BLUE}Type: $deployment_name"
    echo -e "${LIGHT_BLUE}IaaS: $iaas_provider${NC}\n"
}

function common::read_terraform_output() {
    
    if [[ ! -e $workspace_path/terraform.output ]]; then
        common::show_env

        echo -e "${RED}\nERROR! The deployment recipe needs to initialized and refreshed."
        echo -e "       Run 'caps-tf plan' to list the changes to be made. If the"
        echo -e "       environment has already been provisioned then the only"
        echo -e "       change should be the creation of the local SSH key files.${NC}\n"
        exit 1
    fi
    tf_output=$(cat $workspace_path/terraform.output)
}
