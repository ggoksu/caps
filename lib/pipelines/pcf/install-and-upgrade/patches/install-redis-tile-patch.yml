- op: add
  path: /resources/-
  value:
    name: ${product_name}-tile
    type: pivnet
    source:
      api_token: ((pivnet_token))
      product_slug: ${product_slug}
      product_version: ${product_version}
      sort_by: semver

- op: add
  path: /jobs/-
  value:
    name: ${product_name}-tile-regulator
    plan:
    - get: schedule
      trigger: true
    - get: ${product_name}-tile
      params: {globs: []}
      # params:
      #   globs:
      #   - ((product_globs))

- op: add
  path: /jobs/-
  value:
    name: upload-${product_name}-tile
    serial_groups: [opsman]
    plan:
    - aggregate:
      - get: automation
      - get: pivnet-opsmgr
        passed: [deploy-director]
        trigger: true
        params: {globs: []}
      - get: pivnet-product
        resource: ${product_name}-tile
        passed: [${product_name}-tile-regulator]
        trigger: true
        params:
          globs:
          - ((product_globs))

    # Upload product tile and its stemcell
    - task: upload-tile
      file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/upload-product-and-stemcell/task.yml
      params:
        IAAS: ((iaas_type))
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPS_MGR_USR: ((opsman_admin_username))
        OPS_MGR_PWD: ((opsman_admin_password))
        PIVNET_API_TOKEN: ((pivnet_token))
        NO_PROXY: ''
        OM_IP: ''

    # Stage product tile
    - task: stage-tile
      file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/stage-product/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        STAGE_AND_APPLY: false
        ENABLE_ERRANDS: ((enable_errands))

- op: add
  path: /jobs/-
  value:
    name: configure-${product_name}-tile
    serial_groups: [opsman]
    plan:
    - aggregate:
      - get: automation
      - get: automation-extensions
      - get: terraform-output
      - get: pivnet-product
        resource: ${product_name}-tile
        passed: [upload-${product_name}-tile]
        trigger: true
        params: { globs: [] }

    # Configure product tile
    - task: configure
      file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-redis/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        # Product configuration
        PRODUCT_NAME: p-redis
        TEMPLATE_PATH: automation/lib/pipelines/pcf/install-and-upgrade/templates/redis
        TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_tile_templates_path))/redis
        ERRANDS_TO_DISABLE: ${errands_to_enable}
        ERRANDS_TO_ENABLE: ${errands_to_disable}
        ERRAND_DEFAULT_IF_ENABLED: when-changed
        # Networking
        NETWORK_NAME: services
        SERVICE_NETWORK_NAME: dynamic-services
        SINGLETON_AVAILABILITY_ZONE: # Sourced from terraform output
        AVAILABILITY_ZONES: # Sourced from terraform output
        # Resources
        INTERNET_CONNECTED: false
        # Properties
        REDIS_SHARED_MAXMEMORY: 512MB
        REDIS_SHARED_INSTANCE_LIMIT: 5
        REDIS_ON_DEMAND_INSTANCE_LIMIT: 20
        SMALL_PLAN_AZ: ((gcp_zone_1))
        SMALL_PLAN_INSTANCE_LIMIT: 20
        MEDIUM_PLAN_AZ: ((gcp_zone_2))
        MEDIUM_PLAN_INSTANCE_LIMIT: 20
        LARGE_PLAN_AZ: ((gcp_zone_3))
        LARGE_PLAN_INSTANCE_LIMI: 0
        SYSLOG_ADDRESS: ''
        SYSLOG_PORT: null
        SYSLOG_TRANSPORT: ''
        SYSLOG_FORMAT: ''
        TLS_SYSLOG_PERMITTED_PEER: null
        TLS_SYSLOG_CA_CERT: ''

- op: add
  path: /jobs/name=deploy/plan/0/aggregate/-
  value:
    get: ${product_name}-tile
    passed: [configure-${product_name}-tile]
    trigger: true
    params: { globs: [] } 
