- type: replace
  path: /resources/-
  value:
    name: ${product_name}-tile
    type: s3
    source:
      bucket: pcf
      endpoint: ((autos3_url))
      access_key_id: ((autos3_access_key))
      secret_access_key: ((autos3_secret_key))
      regexp: downloads/${product_slug}_(.*).tgz

- type: replace
  path: /jobs/-
  value:
    name: stage-and-configure-${product_name}-tile
    on_failure:
      do:
      - task: notify on stage-and-configure-${product_name}-tile failure

    serial: true
    serial_groups: [configure]
    plan:
    - aggregate:
      - get: automation
      - get: automation-extensions
      - get: terraform-output
      - get: pivnet-download
        resource: ${product_name}-tile
        trigger: true

      - get: mysql-tile
        passed: [deploy]
        params:
          skip_download: true

      - get: rabbitmq-tile
        passed: [deploy]
        params:
          skip_download: true

    # Upload product tile and its stemcell
    - task: upload-tile
      file: automation/lib/tasks/opsman/upload-product-and-stemcell/task.yml
      params:
        IAAS: ((iaas_type))
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))

    # Stage product tile
    - task: stage-tile
      file: automation/lib/tasks/opsman/stage-product/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        STAGE_AND_APPLY: false
        ENABLE_ERRANDS: ((enable_errands))

    # Configure product tile
    - task: configure
      file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-scs/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        # Product configuration
        PRODUCT_NAME: p-spring-cloud-services
        TEMPLATE_PATH: automation/lib/pipelines/pcf/install-and-upgrade/templates/scs
        TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_tile_templates_path))/scs
        ERRANDS_TO_DISABLE: ${errands_to_enable}
        ERRANDS_TO_ENABLE: ${errands_to_disable}
        ERRAND_DEFAULT_IF_ENABLED: when-changed
        # Networking
        NETWORK_NAME: services
        SINGLETON_AVAILABILITY_ZONE: # Sourced from terraform output
        AVAILABILITY_ZONES: # Sourced from terraform output
        # Resources
        INTERNET_CONNECTED: false
        # Properties
        ENABLE_GLOBAL_ACCESS: true
        DISABLE_CERT_CHECK: true
        SECURE_CREDENTIALS: false

    # Wait if an opsman is currently in the process of applying a change
    - task: wait-if-apply-in-progress
      file: automation/lib/tasks/opsman/wait-opsman/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))

    # Apply the changes to deploy the SRT
    - task: apply-changes
      file: automation/lib/tasks/opsman/apply-changes/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        PRODUCT_NAME: p-spring-cloud-services

- type: replace
  path: /groups/name=Install & Upgrade Products/jobs?/-
  value: stage-and-configure-${product_name}-tile
