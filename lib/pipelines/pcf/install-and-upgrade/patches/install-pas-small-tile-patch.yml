- type: replace
  path: /jobs/-
  value:
    name: configure-${product_name}-tile
    on_failure:
      do:
      - task: notify on configure-${product_name}-tile failure

    serial: true
    serial_groups: [configure]
    plan:
    - aggregate:
      - get: automation
      - get: automation-extensions
      - get: terraform-output
      - get: pivnet-product
        resource: ${product_name}-tile
        passed: [upload-${product_name}-tile]
        trigger: true
        params:
          skip_download: 'true'

    # Stage product tile
    - task: stage-tile
      file: automation/lib/tasks/opsman/stage-product/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        STAGE_AND_APPLY: false
        ENABLE_ERRANDS: ((enable_errands))

    # Configure product tile
    - task: configure
      file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-srt/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        # Product configuration
        PRODUCT_NAME: cf
        TEMPLATE_PATH: automation/lib/pipelines/pcf/install-and-upgrade/templates/srt
        TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_tile_templates_path))/srt
        # Networking
        NETWORK_NAME: pas
        SINGLETON_AVAILABILITY_ZONE: # Sourced from terraform output
        AVAILABILITY_ZONES: # Sourced from terraform output
        # Resources
        INTERNET_CONNECTED: ((internet_connected))
        # Properties
        IAAS: gcp
        GCP_STORAGE_ACCESS_KEY: ((gcp_storage_access_key))
        GCP_STORAGE_SECRET_KEY: ((gcp_storage_secret_key))
        TERRAFORM_PREFIX: ((gcp_resource_prefix))
        ROUTING_CUSTOM_CA_CERTIFICATES: ((routing_custom_ca_certificates))
        ROUTING_TLS_TERMINATION: ((routing_tls_termination))
        ROUTER_TLS_CIPHERS: ((router_tls_ciphers))
        HAPROXY_TLS_CIPHERS: ((haproxy_tls_ciphers))
        HAPROXY_FORWARD_TLS: ((haproxy_forward_tls))
        HAPROXY_BACKEND_CA: ((haproxy_backend_ca))
        ROUTING_DISABLE_HTTP: ((routing_disable_http))
        CONTAINER_NETWORKING_NETWORK_CIDR: ((container_networking_nw_cidr))
        SECURITY_ACKNOWLEDGEMENT: ((security_acknowledgement))
        CREDHUB_PRIMARY_ENCRYPTION_NAME: ((credhub_primary_encryption_name))
        CREDHUB_ENCRYPTION_KEY_NAME1: ((credhub_encryption_key_name1))
        CREDHUB_ENCRYPTION_KEY_SECRET1: ((credhub_encryption_key_secret1))
        CREDHUB_ENCRYPTION_KEY_NAME2: ((credhub_encryption_key_name2))
        CREDHUB_ENCRYPTION_KEY_SECRET2: ((credhub_encryption_key_secret2))
        CREDHUB_ENCRYPTION_KEY_NAME3: ((credhub_encryption_key_name3))
        CREDHUB_ENCRYPTION_KEY_SECRET3: ((credhub_encryption_key_secret3))
        PAS_DB_TYPE: ((pas_db_type))
        DB_USERNAME: ((db_username))
        DB_PASSWORD: ((db_password))
        MYSQL_MONITOR_RECIPIENT_EMAIL: ((mysql_monitor_recipient_email))
        NUM_DIEGO_CELLS: ((num_diego_cells))

- type: replace
  path: /jobs/name=deploy/plan/0/aggregate/-
  value:
    get: ${product_name}-tile
    passed: [configure-${product_name}-tile]
    trigger: true
    params:
      skip_download: 'true'
