- type: replace
  path: /resources/-
  value:
    name: ${product_name}-tile
    type: pivnet
    source:
      api_token: ((pivnet_token))
      product_slug: ${product_slug}
      product_version: ${product_version}
      sort_by: semver

- type: replace
  path: /jobs/-
  value:
    name: ${product_name}-tile-regulator
    plan:
    - get: schedule
      trigger: true
    - get: ${product_name}-tile
      params: {globs: []}

- type: replace
  path: /jobs/-
  value:
    name: upload-${product_name}-tile
    on_failure:
      do:
      - task: notify on upload-${product_name}-tile failure
      
    serial: true
    plan:
    - aggregate:
      - get: automation
      - get: pivnet-product
        resource: ${product_name}-tile
        passed: [${product_name}-tile-regulator]
        trigger: true
        params:
          globs:
          - 'srt*.pivotal'

    # Wait for director to be in a ready state
    - task: wait-for-director-to-be-ready
      file: automation/lib/inceptor/tasks/wait-for-state/task.yml
      params: 
        WAIT_FOR_STATE: director_ready
        AUTOS3_URL: ((autos3_url))
        AUTOS3_ACCESS_KEY: ((autos3_access_key))
        AUTOS3_SECRET_KEY: ((autos3_secret_key))

    # Upload product tile and its stemcell
    - task: upload-tile
      file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/upload-product-and-stemcell/task.yml
      params:
        IAAS: ((iaas_type))
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPS_MGR_USR: ((opsman_admin_username))
        OPS_MGR_PWD: ((opsman_admin_password))
        PIVNET_API_TOKEN: ((pivnet_token))
        NO_PROXY: ''
        OM_IP: ''

    # Stage product tile
    - task: stage-tile
      file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/stage-product/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        STAGE_AND_APPLY: false
        ENABLE_ERRANDS: ((enable_errands))

- type: replace
  path: /jobs/-
  value:
    name: configure-${product_name}-tile
    on_failure:
      do:
      - task: notify on configure-${product_name}-tile failure

    serial: true
    serial_groups: [configure]
    plan:
    - aggregate:
      - get: automation
      - get: automation-extensions
      - get: terraform-output
      - get: pivnet-product
        resource: ${product_name}-tile
        passed: [upload-${product_name}-tile]
        trigger: true
        params: { globs: [] }

    # Configure product tile
    - task: configure
      file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-srt/task.yml
      params:
        OPSMAN_HOST: ((opsman_host))
        OPSMAN_CLIENT_ID: ((opsman_client_id))
        OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
        OPSMAN_USERNAME: ((opsman_admin_username))
        OPSMAN_PASSWORD: ((opsman_admin_password))
        # Product configuration
        PRODUCT_NAME: cf
        TEMPLATE_PATH: automation/lib/pipelines/pcf/install-and-upgrade/templates/srt
        TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_tile_templates_path))/srt
        # Networking
        NETWORK_NAME: pas
        SINGLETON_AVAILABILITY_ZONE: # Sourced from terraform output
        AVAILABILITY_ZONES: # Sourced from terraform output
        # Resources
        INTERNET_CONNECTED: ((internet_connected))
        # Properties
        IAAS: gcp
        GCP_STORAGE_ACCESS_KEY: ((gcp_storage_access_key))
        GCP_STORAGE_SECRET_KEY: ((gcp_storage_secret_key))
        TERRAFORM_PREFIX: ((gcp_resource_prefix))
        ROUTING_CUSTOM_CA_CERTIFICATES: ((routing_custom_ca_certificates))
        ROUTING_TLS_TERMINATION: ((routing_tls_termination))
        ROUTER_TLS_CIPHERS: ((router_tls_ciphers))
        HAPROXY_TLS_CIPHERS: ((haproxy_tls_ciphers))
        HAPROXY_FORWARD_TLS: ((haproxy_forward_tls))
        HAPROXY_BACKEND_CA: ((haproxy_backend_ca))
        ROUTING_DISABLE_HTTP: ((routing_disable_http))
        CONTAINER_NETWORKING_NETWORK_CIDR: ((container_networking_nw_cidr))
        SECURITY_ACKNOWLEDGEMENT: ((security_acknowledgement))
        DB_UAA_TYPE: ((db_uaa_type))
        DB_UAA_USERNAME: ((db_uaa_username))
        DB_UAA_PASSWORD: ((db_uaa_password))
        DB_CREDHUB_TYPE: ((db_credhub_type))
        DB_CREDHUB_USERNAME: ((db_credhub_username))
        DB_CREDHUB_PASSWORD: ((db_credhub_password))
        CREDHUB_PRIMARY_ENCRYPTION_NAME: ((credhub_primary_encryption_name))
        CREDHUB_ENCRYPTION_KEY_NAME1: ((credhub_encryption_key_name1))
        CREDHUB_ENCRYPTION_KEY_SECRET1: ((credhub_encryption_key_secret1))
        CREDHUB_ENCRYPTION_KEY_NAME2: ((credhub_encryption_key_name2))
        CREDHUB_ENCRYPTION_KEY_SECRET2: ((credhub_encryption_key_secret2))
        CREDHUB_ENCRYPTION_KEY_NAME3: ((credhub_encryption_key_name3))
        CREDHUB_ENCRYPTION_KEY_SECRET3: ((credhub_encryption_key_secret3))
        DB_TYPE: ((db_type))
        DB_APP_USAGE_SERVICE_USERNAME: ((db_app_usage_service_username))
        DB_APP_USAGE_SERVICE_PASSWORD: ((db_app_usage_service_password))
        DB_AUTOSCALE_USERNAME: ((db_autoscale_username))
        DB_AUTOSCALE_PASSWORD: ((db_autoscale_password))
        DB_DIEGO_USERNAME: ((db_diego_username))
        DB_DIEGO_PASSWORD: ((db_diego_password))
        DB_NOTIFICATIONS_USERNAME: ((db_notifications_username))
        DB_NOTIFICATIONS_PASSWORD: ((db_notifications_password))
        DB_ROUTING_USERNAME: ((db_routing_username))
        DB_ROUTING_PASSWORD: ((db_routing_password))
        DB_CCDB_USERNAME: ((db_ccdb_username))
        DB_CCDB_PASSWORD: ((db_ccdb_password))
        DB_ACCOUNTDB_USERNAME: ((db_accountdb_username))
        DB_ACCOUNTDB_PASSWORD: ((db_accountdb_password))
        DB_NETWORKPOLICYSERVERDB_USERNAME: ((db_networkpolicyserverdb_username))
        DB_NETWORKPOLICYSERVERDB_PASSWORD: ((db_networkpolicyserverdb_password))
        DB_NFSVOLUMEDB_USERNAME: ((db_nfsvolumedb_username))
        DB_NFSVOLUMEDB_PASSWORD: ((db_nfsvolumedb_password))
        DB_LOCKET_USERNAME: ((db_locket_username))
        DB_LOCKET_PASSWORD: ((db_locket_password))
        DB_SILK_USERNAME: ((db_silk_username))
        DB_SILK_PASSWORD: ((db_silk_password))
        MYSQL_MONITOR_RECIPIENT_EMAIL: ((mysql_monitor_recipient_email))
        NUM_DIEGO_CELLS: ((num_diego_cells))

- type: replace
  path: /jobs/name=deploy/plan/0/aggregate/-
  value:
    get: ${product_name}-tile
    passed: [configure-${product_name}-tile]
    trigger: true
    params: { globs: [] } 

- type: replace
  path: /groups/name=Products/jobs?/-
  value: ${product_name}-tile-regulator

- type: replace
  path: /groups/name=Products/jobs?/-
  value: upload-${product_name}-tile

- type: replace
  path: /groups/name=Products/jobs?/-
  value: configure-${product_name}-tile
