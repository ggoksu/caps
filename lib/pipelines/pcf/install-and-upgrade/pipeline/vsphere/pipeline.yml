---
groups:
- name: Install & Upgrade Director
  jobs:
  - destroy-env
  - create-infrastructure
  # - configure-director
  # - deploy-director
- name: Install & Upgrade Products

resources:
- name: automation
  type: git
  source:
    uri: ((automation_pipelines_repo))
    branch: ((automation_pipelines_branch))

- name: automation-extensions
  type: git
  source:
    uri: ((automation_extensions_repo))
    branch: ((automation_extensions_branch))

- name: opsman-image
  type: s3
  source:
    bucket: pcf
    endpoint: ((autos3_url))
    access_key_id: ((autos3_access_key))
    secret_access_key: ((autos3_secret_key))
    regexp: downloads/ops-manager_(.*).tgz

jobs:

- name: destroy-env
  serial: true
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
  - task: set-stopped-state
    file: automation/lib/inceptor/tasks/toggle-state/task.yml
    params: 
      OFF_STATE: started
      ON_STATE: stopped
      VERSION_INCREMENT: 0
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))
  - task: destroy-infrastructure
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/destroy-infrastructure/task.yml
    params:
      IAAS: ((iaas_type))
      # VSphere Credentials
      VSPHERE_SERVER: ((vsphere_server))
      VSPHERE_USER: ((vsphere_user))
      VSPHERE_PASSWORD: ((vsphere_password))
      VSPHERE_ALLOW_UNVERIFIED_SSL: true
      # PowerDNS Credentials
      PDNS_SERVER_URL: ((pdns_server_url))
      PDNS_API_KEY: ((pdns_api_key))
      # S3 credentials if S3 is the Terraform
      # backend for the bootstrap state
      S3_ACCESS_KEY_ID: ((s3_access_key_id))
      S3_SECRET_ACCESS_KEY: ((s3_secret_access_key))
      S3_DEFAULT_REGION: ((s3_default_region))
      # Custom S3 end-point if not 
      # targetting AWS S3
      TF_STATE_S3_ENDPOINT: ((terraform_state_s3_endpoint))
      # The bucket where the Terraform state 
      # will be saved
      TERRAFORM_STATE_BUCKET: ((terraform_state_bucket))
      # Prefix to use with cloud resource names 
      # as well as the location of Terraform
      # state
      DEPLOYMENT_PREFIX: ((deployment_prefix))
      # Path for additional Terraform templates
      # that customize the default infrastructure
      # templates 
      TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_terraform_templates_path))/((environment))/infrastructure
      # Inputs to PCF PAS infrastructure Terraform templates
      TF_VAR_environment: ((environment))
      TF_VAR_bootstrap_state_bucket: ((terraform_state_bucket))
      TF_VAR_bootstrap_state_prefix: ((bootstrap_state_prefix))

- name: create-infrastructure
  on_failure:
    do:
    - task: notify on create-infrastructure failure

  serial: true
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
    - get: pivnet-download
      resource: opsman-image
      trigger: true

  # Wait if the Ops Manager is currently in the
  # process of applying a change
  - task: wait-if-apply-in-progress
    file: automation/lib/tasks/opsman/wait-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))

  # If a new Ops Manager has been uploaded to the  
  # IaaS then set the director to a not-ready state 
  # so the new one can be deployed
  - task: set-director-not-ready
    file: automation/lib/inceptor/tasks/toggle-state/task.yml
    params: 
      OFF_STATE: director_ready
      ON_STATE: director_not_ready
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

  # Upload new Ops Manager image to the IAAS
  - task: create-infrastructure
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/create-infrastructure/task.yml
    params:
      IAAS: ((iaas_type))
      # VSphere Credentials
      VSPHERE_SERVER: ((vsphere_server))
      VSPHERE_USER: ((vsphere_user))
      VSPHERE_PASSWORD: ((vsphere_password))
      VSPHERE_ALLOW_UNVERIFIED_SSL: true
      # PowerDNS Credentials
      PDNS_SERVER_URL: ((pdns_server_url))
      PDNS_API_KEY: ((pdns_api_key))
      # S3 credentials if S3 is the Terraform
      # backend for the bootstrap state
      S3_ACCESS_KEY_ID: ((s3_access_key_id))
      S3_SECRET_ACCESS_KEY: ((s3_secret_access_key))
      S3_DEFAULT_REGION: ((s3_default_region))
      # Custom S3 end-point if not 
      # targetting AWS S3
      TF_STATE_S3_ENDPOINT: ((terraform_state_s3_endpoint))
      # The bucket where the Terraform state 
      # will be saved
      TERRAFORM_STATE_BUCKET: ((terraform_state_bucket))
      # Prefix to use with cloud resource names 
      # as well as the location of Terraform
      # state
      DEPLOYMENT_PREFIX: ((deployment_prefix))
      # Path for additional Terraform templates
      # that customize the default infrastructure
      # templates 
      TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_terraform_templates_path))/((environment))/infrastructure
      # Inputs to PCF PAS infrastructure Terraform templates
      TF_VAR_environment: ((environment))
      TF_VAR_bootstrap_state_bucket: ((terraform_state_bucket))
      TF_VAR_bootstrap_state_prefix: ((bootstrap_state_prefix))
      TF_VAR_system_domain_prefix: ((system_domain_prefix))
      TF_VAR_apps_domain_prefix: ((apps_domain_prefix))
