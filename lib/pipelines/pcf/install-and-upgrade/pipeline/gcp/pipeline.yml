groups: []

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: automation
  type: git
  source:
    uri: ((automation_pipelines_repo))
    branch: ((automation_pipelines_branch))

- name: automation-extensions
  type: git
  source:
    uri: ((automation_extensions_repo))
    branch: ((automation_extensions_branch))

- name: terraform-output
  type: s3
  source:
    bucket: pcf
    endpoint: ((autos3_url))
    access_key_id: ((autos3_access_key))
    secret_access_key: ((autos3_secret_key))
    regexp: terraform-output/pcf-env-(.*).sh

- name: pivnet-opsmgr
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: ((opsman_major_minor_version))
    sort_by: semver

jobs:

- name: destroy-env
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
  - task: destroy
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/destroy-infrastructure/gcp/task.yml
    params:
      GCP_RESOURCE_PREFIX: ((gcp_resource_prefix))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      TERRAFORM_STATE_BUCKET: ((terraform_state_bucket))
      TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_terraform_templates_path))
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_ZONE: ((gcp_zone_1))

- name: upload-opsman-image
  on_failure:
    do:
    - task: notify on upload-opsman-image failure
  plan:
  - aggregate:
    - get: automation
    - get: pivnet-opsmgr
      trigger: true
      params:
        globs:
        - '*GCP.yml'
  - task: upload
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/upload-opsman/gcp/task.yml
    params:
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))

- name: create-infrastructure
  serial_groups: [terraform,opsman]
  on_failure:
    do:
    - task: notify on create-infrastructure failure
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
    - get: pivnet-opsmgr
      passed: [upload-opsman-image]
      trigger: true
      params:
        globs:
        - '*GCP.yml'
  - task: create-infrastructure
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/create-infrastructure/gcp/task.yml
    params:
      GCP_RESOURCE_PREFIX: ((gcp_resource_prefix))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      TERRAFORM_STATE_BUCKET: ((terraform_state_bucket))
      TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_terraform_templates_path))
      # Inputs to PCF PAS infrastructure Terraform templates
      TF_VAR_gcp_region: ((gcp_region))
      TF_VAR_gcp_zone_1: ((gcp_zone_1))
      TF_VAR_gcp_zone_2: ((gcp_zone_2))
      TF_VAR_gcp_zone_3: ((gcp_zone_3))
      TF_VAR_environment: ((environment))
      TF_VAR_prefix: ((gcp_resource_prefix))
      TF_VAR_gcp_storage_bucket_location: ((gcp_storage_bucket_location))
      TF_VAR_terraform_state_bucket: ((terraform_state_bucket))
      TF_VAR_bootstrap_state_prefix: ((bootstrap_state_prefix))
      TF_VAR_system_domain_prefix: ((system_domain_prefix))
      TF_VAR_apps_domain_prefix: ((apps_domain_prefix))
      TF_VAR_pcf_ert_ssl_cert: ((ert_ssl_cert1))
      TF_VAR_pcf_ert_ssl_key: ((ert_ssl_key1))
      TF_VAR_pcf_saml_ssl_cert: ((saml_ssl_cert1))
      TF_VAR_pcf_saml_ssl_key: ((saml_ssl_key1))
      TF_VAR_db_app_usage_service_username: ((db_app_usage_service_username))
      TF_VAR_db_app_usage_service_password: ((db_app_usage_service_password))
      TF_VAR_db_autoscale_username: ((db_autoscale_username))
      TF_VAR_db_autoscale_password: ((db_autoscale_password))
      TF_VAR_db_diego_username: ((db_diego_username))
      TF_VAR_db_diego_password: ((db_diego_password))
      TF_VAR_db_notifications_username: ((db_notifications_username))
      TF_VAR_db_notifications_password: ((db_notifications_password))
      TF_VAR_db_routing_username: ((db_routing_username))
      TF_VAR_db_routing_password: ((db_routing_password))
      TF_VAR_db_uaa_username: ((db_uaa_username))
      TF_VAR_db_uaa_password: ((db_uaa_password))
      TF_VAR_db_ccdb_username: ((db_ccdb_username))
      TF_VAR_db_ccdb_password: ((db_ccdb_password))
      TF_VAR_db_accountdb_username: ((db_accountdb_username))
      TF_VAR_db_accountdb_password: ((db_accountdb_password))
      TF_VAR_db_networkpolicyserverdb_username: ((db_networkpolicyserverdb_username))
      TF_VAR_db_networkpolicyserverdb_password: ((db_networkpolicyserverdb_password))
      TF_VAR_db_nfsvolumedb_username: ((db_nfsvolumedb_username))
      TF_VAR_db_nfsvolumedb_password: ((db_nfsvolumedb_password))
      TF_VAR_db_locket_username: ((db_locket_username))
      TF_VAR_db_locket_password: ((db_locket_password))
      TF_VAR_db_silk_username: ((db_silk_username))
      TF_VAR_db_silk_password: ((db_silk_password))
      TF_VAR_db_credhub_username: ((db_credhub_username))
      TF_VAR_db_credhub_password: ((db_credhub_password))
  - task: save-terraform-output
    file: automation/lib/inceptor/tasks/upload-object/task.yml
    params: 
      BUCKET: pcf
      UPLOAD_PATH: terraform-output
      OBJECT_NAME: pcf-env.sh
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

- name: configure-director
  serial_groups: [opsman]
  on_failure:
    do:
    - task: notify on configure-director failure
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
    - get: pivnet-opsmgr
      passed: [create-infrastructure]
      trigger: true
      params: {globs: []}
  - get: terraform-output
  - task: configure-opsman-authentication
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPSMAN_DECRYPTION_KEY: ((opsman_admin_password))
  - task: configure-director
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-director/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      # The IAAS specific templates to configure
      IAAS: gcp
      # JQ configuration template overrides 
      TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_tile_templates_path))/director
      # IAAS properties
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      GCP_RESOURCE_PREFIX: ((gcp_resource_prefix))
      # Director properties
      NTP_SERVERS: ''                 # Default '0.pool.ntp.org,1.pool.ntp.org'
      RESURRECTOR_ENABLED: ''         # Default 'true'
      POST_DEPLOY_ENABLED: 'true'
      RETRY_BOSH_DEPLOYS:  ''         # Default 'true'
      # Availability Zone properties
      AVAILABILITY_ZONES: ''          # Sourced from terraform output
      CURR_AZ_CONFIGURATION: ''       # Retrieved from via OM CLI
      # Network properties
      ICMP_CHECKS_ENABLED: ''         # Default 'false'
      PCF_NETWORKS: ''                # Sourced from terraform output
      CURR_NETWORK_CONFIGURATION: ''  # Retrieved from via OM CLI
      # AZ and Network assignement properties
      NETWORK: ''                     # Default 'infrastructure'
      # Security properties
      TRUSTED_CERTIFICATES: ''        # Sourced from terraform output
      # Resource properties
      INTERNET_CONNECTED: ''          # Default 'false'

- name: deploy-director
  serial_groups: [opsman]
  on_failure:
    do:
    - task: notify on deploy-director failure
  on_success:
    do:
    - task: notify on deploy-director success
  plan:
  - aggregate:
    - get: automation
    - get: pivnet-opsmgr
      passed: [configure-director]
      trigger: true
      params: {globs: []}
  - task: check-opsman-clear
    file: automation/lib/tasks/opsman/wait-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
  - task: deploy-director
    file: automation/lib/tasks/opsman/apply-changes/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_id))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      DIRECTOR_ONLY: true
      DISABLE_ERRANDS:
