---
groups:
- name: Install & Upgrade Director
  jobs:
  - destroy-env
  - upload-opsman-image
  - create-infrastructure
  - configure-director
  - deploy-director
- name: Install & Upgrade Products

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: automation
  type: git
  source:
    uri: ((automation_pipelines_repo))
    branch: ((automation_pipelines_branch))

- name: automation-extensions
  type: git
  source:
    uri: ((automation_extensions_repo))
    branch: ((automation_extensions_branch))

- name: terraform-output
  type: s3
  source:
    bucket: pcf
    endpoint: ((autos3_url))
    access_key_id: ((autos3_access_key))
    secret_access_key: ((autos3_secret_key))
    regexp: terraform-output/pcf-env-(.*).sh

- name: pivnet-opsmgr
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: ((opsman_major_minor_version))
    sort_by: semver

jobs:

- name: destroy-env
  serial: true
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
  - task: set-stopped-state
    file: automation/lib/inceptor/tasks/toggle-state/task.yml
    params: 
      OFF_STATE: started
      ON_STATE: stopped
      VERSION_INCREMENT: 0
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))
  - task: destroy-infrastructure
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/destroy-infrastructure/gcp/task.yml
    params:
      GCP_RESOURCE_PREFIX: ((gcp_resource_prefix))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      TERRAFORM_STATE_BUCKET: ((terraform_state_bucket))
      TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_terraform_templates_path))
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))

- name: upload-opsman-image
  on_failure:
    do:
    - task: notify on upload-opsman-image failure

  serial: true
  plan:
  - aggregate:
    - get: automation
    - get: pivnet-opsmgr
      trigger: true
      params:
        globs:
        - '*GCP.yml'

  # Upload new Ops Manager image to the IAAS
  - task: upload
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/upload-opsman/gcp/task.yml
    params:
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))

  # Wait if the Ops Manager is currently in the
  # process of applying a change
  - task: wait-if-apply-in-progress
    file: automation/lib/tasks/opsman/wait-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))

  # If a new Ops Manager has been uploaded to the  
  # IaaS then set the director to a not-ready state 
  # so the new one can be deployed
  - task: set-director-not-ready
    file: automation/lib/inceptor/tasks/toggle-state/task.yml
    params: 
      OFF_STATE: director_ready
      ON_STATE: director_not_ready
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

- name: create-infrastructure
  on_failure:
    do:
    - task: notify on create-infrastructure failure

  serial: true
  serial_groups: [terraform,opsman]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
    - get: pivnet-opsmgr
      passed: [upload-opsman-image]
      trigger: true
      params:
        globs:
        - '*GCP.yml'

  # Prepare the IaaS for PCF (e.g. DNS, network, etc.)
  - task: create-infrastructure
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/create-infrastructure/gcp/task.yml
    params:
      GCP_RESOURCE_PREFIX: ((gcp_resource_prefix))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      TERRAFORM_STATE_BUCKET: ((terraform_state_bucket))
      TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_terraform_templates_path))
      # Inputs to PCF PAS infrastructure Terraform templates
      TF_VAR_environment: ((environment))
      TF_VAR_terraform_state_bucket: ((terraform_state_bucket))
      TF_VAR_bootstrap_state_prefix: ((bootstrap_state_prefix))
      TF_VAR_system_domain_prefix: ((system_domain_prefix))
      TF_VAR_apps_domain_prefix: ((apps_domain_prefix))
      TF_VAR_pcf_ert_ssl_cert: ((ert_ssl_cert1))
      TF_VAR_pcf_ert_ssl_key: ((ert_ssl_key1))
      TF_VAR_pcf_saml_ssl_cert: ((saml_ssl_cert1))
      TF_VAR_pcf_saml_ssl_key: ((saml_ssl_key1))
      TF_VAR_pas_db_type: ((pas_db_type))
      TF_VAR_event_alerts_db_type: ((pas_db_type))
      TF_VAR_db_username: ((db_username))
      TF_VAR_db_password: ((db_password))

  # Save terraform output so it can be referenced
  # by external scripts.
  - task: save-terraform-output
    file: automation/lib/inceptor/tasks/upload-object/task.yml
    params: 
      BUCKET: pcf
      UPLOAD_PATH: terraform-output
      OBJECT_NAME: pcf-env.sh
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

- name: configure-director
  on_failure:
    do:
    - task: notify on configure-director failure

  serial: true
  serial_groups: [opsman]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
    - get: pivnet-opsmgr
      passed: [create-infrastructure]
      trigger: true
      params: {globs: []}
  - get: terraform-output

  # Initialize Ops Manager. This is a no-op
  # if the Ops Manager has already been 
  # initialized.
  - task: configure-opsman-authentication
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPSMAN_DECRYPTION_KEY: ((opsman_admin_password))

  # Configure the Ops Manager Bosh Director
  - task: configure-director
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-director/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      # The IAAS specific templates to configure
      IAAS: gcp
      # JQ configuration template overrides 
      TEMPLATE_OVERRIDE_PATH: automation-extensions/((pcf_tile_templates_path))/director
      # IAAS properties
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      GCP_RESOURCE_PREFIX: ((gcp_resource_prefix))
      # Director properties
      NTP_SERVERS: ''                 # Default '0.pool.ntp.org,1.pool.ntp.org'
      RESURRECTOR_ENABLED: ''         # Default 'true'
      POST_DEPLOY_ENABLED: true
      RETRY_BOSH_DEPLOYS:  ''         # Default 'true'
      # Availability Zone properties
      AVAILABILITY_ZONES: ''          # Sourced from terraform output
      CURR_AZ_CONFIGURATION: ''       # Retrieved from via OM CLI
      # Network properties
      ICMP_CHECKS_ENABLED: ''         # Default 'false'
      PCF_NETWORKS: ''                # Sourced from terraform output
      CURR_NETWORK_CONFIGURATION: ''  # Retrieved from via OM CLI
      # AZ and Network assignement properties
      NETWORK: ''                     # Default 'infrastructure'
      # Security properties
      TRUSTED_CERTIFICATES: ''        # Sourced from terraform output
      # Resource properties
      INTERNET_CONNECTED: ''          # Default 'false'

- name: deploy-director
  on_failure:
    do:
    - task: notify on deploy-director failure
  on_success:
    do:
    - task: notify on deploy-director success

  serial: true
  serial_groups: [opsman]
  plan:
  - aggregate:
    - get: automation
    - get: pivnet-opsmgr
      passed: [configure-director]
      trigger: true
      params: {globs: []}

  # Wait if the Ops Manager is currently in the
  # process of applying a change
  - task: wait-if-apply-in-progress
    file: automation/lib/tasks/opsman/wait-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))

  # Invoke Ops Manager Apply changes and ensure
  # only changes to director will be applied
  - task: deploy-director
    file: automation/lib/tasks/opsman/apply-changes/task.yml
    params:
      OPSMAN_HOST: ((opsman_host))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_id))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      DIRECTOR_ONLY: true
      DISABLE_ERRANDS:

  # Sets the director ready state which will 
  # allow any jobs that depend on the director
  # to be up to proceed.
  - task: set-director-ready
    file: automation/lib/inceptor/tasks/toggle-state/task.yml
    params: 
      OFF_STATE: director_not_ready
      ON_STATE: director_ready
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))
