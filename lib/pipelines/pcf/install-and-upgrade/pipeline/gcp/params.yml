---
#
# Automation repo details
#
automation_pipelines_repo: '${automation_pipelines_repo}'
automation_pipelines_branch: '${automation_pipelines_branch}'

automation_extensions_repo: '${automation_extensions_repo}'
automation_extensions_branch: '${automation_extensions_branch}'

#
# GCP Credentials
#

# GCP credentials JSON. The service account must have the Editor role.
gcp_service_account_key: |
  ${gcp_credentials}

# Project to create the infrastructure in
gcp_project: '${gcp_project}'

# Region to create the infrastructure in
gcp_region: '${gcp_region}'

# GCP Zones
gcp_zone_1: '${gcp_zone_1}'
gcp_zone_2: '${gcp_zone_2}'
gcp_zone_3: '${gcp_zone_3}'

# Identifier to prepend to GCP infrastructure names/labels; this should be globally unique
gcp_resource_prefix: '${vpc_name}-pcf'

# GCP Interopable storage access key: https://console.cloud.google.com/storage/settings
gcp_storage_access_key: '${gcp_storage_access_key}'
gcp_storage_secret_key: '${gcp_storage_secret_key}'

# Terraform state location
terraform_state_bucket: "${terraform_state_bucket}"
bootstrap_state_prefix: "${bootstrap_state_prefix}"

# Storage Location
gcp_storage_bucket_location: '${gcp_region}'

# Terraform templates path
pcf_pas_terraform_templates_path: '${pcf_pas_terraform_templates_path}'

#
# Pivnet download and Ops Manager configuration
#

# Pivnet token for downloading resources from Pivnet. Find this 
# token at https://network.pivotal.io/users/dashboard/edit-profile
pivnet_token: '${pivnet_token}'

# Operations Manager credentials to set
# opsman_admin_username/opsman_admin_password needs to be specified
opsman_admin_username: 'admin'
opsman_admin_password: '${opsman_admin_password}'
opsman_client_id: ''
opsman_client_secret: ''

# This should be your pcf_ert_domain with "opsman." as a prefix
opsman_domain_or_ip_address: 'opsman.pas.${vpc_dns_zone}'

# PCF Ops Manager minor version to track
opsman_major_minor_version: '${opsman_major_minor_version}'

# Optional PEM-encoded certificates to add to BOSH director
opsman_trusted_certs: |

#
# PCF runtime configuration
# 

common_admin_password: '${common_admin_password}'

# Ciphers
#
# An ordered, colon-delimited list of Golang supported TLS cipher suites 
# in OpenSSL format. Operators should verify that these are supported by 
# any clients or downstream components that will initiate TLS handshakes 
# with the Router/HAProxy. The recommended settings are filled in below, 
# change as necessary.
router_tls_ciphers: "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384"
haproxy_tls_ciphers: "DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384"

# C2C Networking network CIDR
container_networking_nw_cidr: '10.255.0.0/16'

# For credhub integration, replace dummy values in the following structure
# and set the number of credhub instances in resource config to 2. For 
# credhub integration, Set the number of credhub instances in resource 
# config to 2 Primary Encryption Name MUST match one of the encryption key 
# names provided. Encryption keys 2 and 3 are optional
credhub_primary_encryption_name: 'default'
credhub_encryption_key_name1: 'default'
credhub_encryption_key_secret1: '${credhub_encryption_key}'
credhub_encryption_key_name2: '' # Optional Name 2
credhub_encryption_key_secret2: '' # Optional Secret 2
credhub_encryption_key_name3: '' # Optional Name 3
credhub_encryption_key_secret3: '' # Optional Secret 2

# DB Creds
# Usernames must be 16 characters or fewer
db_accountdb_username: 'pas_system'
db_accountdb_password: '${pas_system_dbpassword}'
db_app_usage_service_username: 'pas_system'
db_app_usage_service_password: '${pas_system_dbpassword}'
db_autoscale_username: 'pas_system'
db_autoscale_password: '${pas_system_dbpassword}'
db_ccdb_username: 'pas_system'
db_ccdb_password: '${pas_system_dbpassword}'
db_diego_username: 'pas_system'
db_diego_password: '${pas_system_dbpassword}'
db_locket_username: 'pas_system'
db_locket_password: '${pas_system_dbpassword}'
db_networkpolicyserverdb_username: 'pas_system'
db_networkpolicyserverdb_password: '${pas_system_dbpassword}'
db_nfsvolumedb_username: 'pas_system'
db_nfsvolumedb_password: '${pas_system_dbpassword}'
db_notifications_username: 'pas_system'
db_notifications_password: '${pas_system_dbpassword}'
db_routing_username: 'pas_system'
db_routing_password: '${pas_system_dbpassword}'
db_silk_username: 'pas_system'
db_silk_password: '${pas_system_dbpassword}'
db_uaa_username: 'pas_system'
db_uaa_password: '${pas_system_dbpassword}'

# Domain Names for ERT
pas_env_domain_prefix: 'pas'
system_domain_prefix: 'sys'
apps_domain_prefix: 'apps'

# Errands to disable prior to deploying ERT
# Valid values:
#   all
#   none
#   "" (empty string)
#   Any combination of the following, separated by comma:
#     smoke-tests
#     push-apps-manager
#     notifications
#     notifications-ui
#     push-pivotal-account
#     autoscaling
#     autoscaling-register-broker
#     nfsbrokerpush
ert_errands_to_disable: '${ert_errands_to_disable}'

# PCF Elastic Runtime minor version to track
ert_major_minor_version: '${ert_major_minor_version}'

# Required if haproxy_forward_tls is enabled - HAProxy will use the CA provided to verify the certificates provided by the router.
haproxy_backend_ca: ''

# If enabled HAProxy will forward all requests to the router over TLS (enable|disable)
haproxy_forward_tls: 'disable'

# Optional - these certificates can be used to validate the certificates from incoming client requests.
# All CA certificates should be appended together into a single collection of PEM-encoded entries.
routing_custom_ca_certificates: ''

# Disable HTTP on gorouters (true|false)
routing_disable_http: false

# Support for the X-Forwarded-Client-Cert header. Possible values: (load_balancer|ha_proxy|router)
routing_tls_termination: 'ha_proxy'

# Whether to enable MySQL backups. (disable|s3|scp)
mysql_backups: 'disable'

#S3 backup config params (leave empty values if you're not using s3)
mysql_backups_s3_access_key_id: ''
mysql_backups_s3_bucket_name: ''
mysql_backups_s3_bucket_path: ''
mysql_backups_s3_cron_schedule: ''
mysql_backups_s3_endpoint_url: ''
mysql_backups_s3_secret_access_key: ''

#SCP backup config params (leave empty values if you're not using scp)
mysql_backups_scp_cron_schedule: ''
mysql_backups_scp_destination: ''
mysql_backups_scp_key: ''
mysql_backups_scp_port: ''
mysql_backups_scp_server: ''
mysql_backups_scp_user: ''

# Email address for sending mysql monitor notifications
mysql_monitor_recipient_email: '${mysql_monitor_recipient_email}'

# Optional. If blank the cert(s) will be generated:
ert_ssl_cert1: ''
ert_ssl_key1: ''
saml_ssl_cert1: ''
saml_ssl_key1: ''

# Setting appropriate Application Security Groups is critical for a secure
# deployment. Change the value of the param below to "X" to acknowledge that
# once the Elastic Runtime deployment completes, you will review and set the
# appropriate application security groups.
# See https://docs.pivotal.io/pivotalcf/opsguide/app-sec-groups.html
security_acknowledgement: 'X'

# Whether or not the ERT VMs are internet connected.
internet_connected: false

# Number of Diego Cells to create
num_diego_cells: $num_diego_cells

#
# Common variables for tile uploads
#


# Set to true to enable all errands for product tiles other than the pas tile, 
# false to disable all or leave blank to keep states the same.
enable_errands: ''

# The globs regular expression for the PivNet resource to download the product
# release files. "*pivotal" is the default.
# For products such as ERT, it is recommended to use "cf*pivotal" to avoid the
# extra download of the SRT file in PCF 1.12.*
product_globs: "*pivotal"

# The IaaS name for which stemcell to download. This must match the IaaS name
# within the stemcell to download, e.g. "vsphere", "aws", "azure", "google" must be lowercase.
iaas_type: 'google'
