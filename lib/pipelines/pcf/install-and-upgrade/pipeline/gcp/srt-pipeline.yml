groups: []

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: automation
  type: git
  source:
    uri: ((automation_pipelines_repo))
    branch: ((automation_pipelines_branch))

- name: automation-extensions
  type: git
  source:
    uri: ((automation_extensions_repo))
    branch: ((automation_extensions_branch))

- name: terraform-output
  type: s3
  source:
    bucket: pcf
    endpoint: ((autos3_url))
    access_key_id: ((autos3_access_key))
    secret_access_key: ((autos3_secret_key))
    regexp: terraform-output/pcf-env-(.*).sh

- name: pivnet-opsmgr
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    product_version: ((opsman_major_minor_version))
    sort_by: semver

- name: pas-tile
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: elastic-runtime
    product_version: ((ert_major_minor_version))
    sort_by: semver

- name: schedule
  type: time
  source:
    interval: 30m
    start: "12:00 AM"
    stop: "11:59 PM"
    location: America/Los_Angeles
    days: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]

jobs:

- name: destroy-env
  serial_groups: [terraform]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
  - task: destroy
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/destroy-infrastructure/gcp/task.yml
    params:
      GCP_RESOURCE_PREFIX: ((gcp_resource_prefix))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      TERRAFORM_STATE_BUCKET: ((terraform_state_bucket))
      TERRAFORM_TEMPLATES_PATH: automation-extensions/((pcf_pas_terraform_templates_path))
      OPSMAN_HOST: ((opsman_domain_or_ip_address))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_ZONE: ((gcp_zone_1))

- name: upload-opsman-image
  plan:
  - aggregate:
    - get: automation
    - get: pivnet-opsmgr
      trigger: true
      params:
        globs:
        - "*GCP.yml"
  - task: upload
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/upload-opsman/gcp/task.yml
    params:
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))

- name: create-infrastructure
  serial_groups: [terraform,opsman]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
    - get: pivnet-opsmgr
      passed: [upload-opsman-image]
      trigger: true
      params:
        globs:
        - "*GCP.yml"
  - task: create-infrastructure
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/create-infrastructure/gcp/task.yml
    params:
      GCP_RESOURCE_PREFIX: ((gcp_resource_prefix))
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      TERRAFORM_STATE_BUCKET: ((terraform_state_bucket))
      TERRAFORM_TEMPLATES_PATH: automation-extensions/((pcf_pas_terraform_templates_path))
      # Inputs to PCF PAS infrastructure Terraform templates
      TF_VAR_gcp_region: ((gcp_region))
      TF_VAR_gcp_zone_1: ((gcp_zone_1))
      TF_VAR_gcp_zone_2: ((gcp_zone_2))
      TF_VAR_gcp_zone_3: ((gcp_zone_3))
      TF_VAR_prefix: ((gcp_resource_prefix))
      TF_VAR_gcp_storage_bucket_location: ((gcp_storage_bucket_location))
      TF_VAR_terraform_state_bucket: ((terraform_state_bucket))
      TF_VAR_bootstrap_state_prefix: ((bootstrap_state_prefix))
      TF_VAR_pas_env_domain_prefix: ((pas_env_domain_prefix))
      TF_VAR_system_domain_prefix: ((system_domain_prefix))
      TF_VAR_apps_domain_prefix: ((apps_domain_prefix))
      TF_VAR_pcf_ert_ssl_cert: ((ert_ssl_cert1))
      TF_VAR_pcf_ert_ssl_key: ((ert_ssl_key1))
      TF_VAR_pcf_saml_ssl_cert: ((saml_ssl_cert1))
      TF_VAR_pcf_saml_ssl_key: ((saml_ssl_key1))
      TF_VAR_db_app_usage_service_username: ((db_app_usage_service_username))
      TF_VAR_db_app_usage_service_password: ((db_app_usage_service_password))
      TF_VAR_db_autoscale_username: ((db_autoscale_username))
      TF_VAR_db_autoscale_password: ((db_autoscale_password))
      TF_VAR_db_diego_username: ((db_diego_username))
      TF_VAR_db_diego_password: ((db_diego_password))
      TF_VAR_db_notifications_username: ((db_notifications_username))
      TF_VAR_db_notifications_password: ((db_notifications_password))
      TF_VAR_db_routing_username: ((db_routing_username))
      TF_VAR_db_routing_password: ((db_routing_password))
      TF_VAR_db_uaa_username: ((db_uaa_username))
      TF_VAR_db_uaa_password: ((db_uaa_password))
      TF_VAR_db_ccdb_username: ((db_ccdb_username))
      TF_VAR_db_ccdb_password: ((db_ccdb_password))
      TF_VAR_db_accountdb_username: ((db_accountdb_username))
      TF_VAR_db_accountdb_password: ((db_accountdb_password))
      TF_VAR_db_networkpolicyserverdb_username: ((db_networkpolicyserverdb_username))
      TF_VAR_db_networkpolicyserverdb_password: ((db_networkpolicyserverdb_password))
      TF_VAR_db_nfsvolumedb_username: ((db_nfsvolumedb_username))
      TF_VAR_db_nfsvolumedb_password: ((db_nfsvolumedb_password))
      TF_VAR_db_locket_username: ((db_locket_username))
      TF_VAR_db_locket_password: ((db_locket_password))
      TF_VAR_db_silk_username: ((db_silk_username))
      TF_VAR_db_silk_password: ((db_silk_password))
  - task: save-terraform-output
    file: automation/lib/tasks/automation/upload-object/task.yml
    params: 
      BUCKET: pcf
      UPLOAD_PATH: terraform-output
      OBJECT_NAME: pcf-env.sh
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

- name: configure-director
  serial_groups: [opsman]
  plan:
  - aggregate:
    - get: automation
    - get: automation-extensions
    - get: pivnet-opsmgr
      passed: [create-infrastructure]
      trigger: true
      params: {globs: []}
  - get: terraform-output
  - task: configure-opsman-authentication
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_domain_or_ip_address))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPSMAN_DECRYPTION_KEY: ((opsman_admin_password))
  - task: configure-director
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-director/task.yml
    params:
      OPSMAN_HOST: ((opsman_domain_or_ip_address))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      IAAS: gcp
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      GCP_PROJECT_ID: ((gcp_project))
      GCP_REGION: ((gcp_region))
      GCP_RESOURCE_PREFIX: ((gcp_resource_prefix))
      OPS_MGR_TRUSTED_CERTS: ((opsman_trusted_certs))
      AVAILABILITY_ZONES: ((gcp_zone_1)),((gcp_zone_2)),((gcp_zone_3))

- name: deploy-director
  serial_groups: [opsman]
  plan:
  - aggregate:
    - get: automation
    - get: pivnet-opsmgr
      passed: [configure-director]
      trigger: true
      params: {globs: []}
  - task: check-opsman-clear
    file: automation/lib/tasks/opsman/wait-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_domain_or_ip_address))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
  - task: deploy-director
    file: automation/lib/tasks/opsman/apply-changes/task.yml
    params:
      OPSMAN_HOST: ((opsman_domain_or_ip_address))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_id))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      DIRECTOR_ONLY: true
      DISABLE_ERRANDS:

- name: pas-tile-regulator
  plan:
  - get: schedule
    trigger: true
  - get: pas-tile
    params: {globs: []}
    # params: 
    #   globs: 
    #   - "srt*.pivotal"

- name: upload-srt
  serial_groups: [opsman]
  plan:
  - aggregate:
    - get: automation
    - get: pivnet-opsmgr
      passed: [deploy-director]
      trigger: true
      params: {globs: []}
    - get: pivnet-product
      resource: pas-tile
      passed: [pas-tile-regulator]
      trigger: true
      params: 
        globs: 
        - "srt*.pivotal"

  # Upload product tile and its stemcell
  - task: upload-tile
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/upload-product-and-stemcell/task.yml
    params:
      IAAS: ((iaas_type))
      OPSMAN_HOST: ((opsman_domain_or_ip_address))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPS_MGR_USR: ((opsman_admin_username))
      OPS_MGR_PWD: ((opsman_admin_password))
      PIVNET_API_TOKEN: ((pivnet_token))
      NO_PROXY: ""
      OM_IP: ""

  # Stage product tile
  - task: stage-tile
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/stage-product/task.yml
    params:
      OPSMAN_HOST: ((opsman_domain_or_ip_address))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      STAGE_AND_APPLY: false
      ENABLE_ERRANDS: ((enable_errands))

- name: configure-srt
  serial_groups: [opsman]
  plan:
  - aggregate:
    - get: automation
    - get: pivnet-product
      resource: pas-tile
      passed: [upload-srt]
      trigger: true
      params: { globs: [] }
    - get: terraform-output

  # Configure the SRT with an initial configuration and prepare it for deployment
  - task: configure-srt
    file: automation/lib/pipelines/pcf/install-and-upgrade/tasks/configure-srt/task.yml
    params:
      OPSMAN_HOST: ((opsman_domain_or_ip_address))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      # srt product and configuration
      PRODUCT_NAME: cf
      TEMPLATE_PATH: automation/lib/pipelines/pcf/install-and-upgrade/templates/srt
      TEMPLATE_OVERRIDE_PATH:
      # srt networking
      NETWORK_NAME: ert
      SINGLETON_AVAILABILITY_ZONE: # Sourced from terraform output
      AVAILABILITY_ZONES: # Sourced from terraform output
      # srt resources
      INTERNET_CONNECTED: ((internet_connected))
      # srt properties
      IAAS: gcp
      GCP_STORAGE_ACCESS_KEY: ((gcp_storage_access_key))
      GCP_STORAGE_SECRET_KEY: ((gcp_storage_secret_key))
      TERRAFORM_PREFIX: ((gcp_resource_prefix))
      ROUTING_CUSTOM_CA_CERTIFICATES: ((routing_custom_ca_certificates))
      ROUTING_TLS_TERMINATION: ((routing_tls_termination))
      ROUTER_TLS_CIPHERS: ((router_tls_ciphers))
      HAPROXY_TLS_CIPHERS: ((haproxy_tls_ciphers))
      HAPROXY_FORWARD_TLS: ((haproxy_forward_tls))
      HAPROXY_BACKEND_CA: ((haproxy_backend_ca))
      ROUTING_DISABLE_HTTP: ((routing_disable_http))
      CONTAINER_NETWORKING_NETWORK_CIDR: ((container_networking_nw_cidr))
      SECURITY_ACKNOWLEDGEMENT: ((security_acknowledgement))
      CREDHUB_PRIMARY_ENCRYPTION_NAME: ((credhub_primary_encryption_name))
      CREDHUB_ENCRYPTION_KEY_NAME1: ((credhub_encryption_key_name1))
      CREDHUB_ENCRYPTION_KEY_SECRET1: ((credhub_encryption_key_secret1))
      CREDHUB_ENCRYPTION_KEY_NAME2: ((credhub_encryption_key_name2))
      CREDHUB_ENCRYPTION_KEY_SECRET2: ((credhub_encryption_key_secret2))
      CREDHUB_ENCRYPTION_KEY_NAME3: ((credhub_encryption_key_name3))
      CREDHUB_ENCRYPTION_KEY_SECRET3: ((credhub_encryption_key_secret3))
      DATABASE_TYPE: external
      DB_UAA_USERNAME: ((db_uaa_username))
      DB_UAA_PASSWORD: ((db_uaa_password))
      DB_APP_USAGE_SERVICE_USERNAME: ((db_app_usage_service_username))
      DB_APP_USAGE_SERVICE_PASSWORD: ((db_app_usage_service_password))
      DB_AUTOSCALE_USERNAME: ((db_autoscale_username))
      DB_AUTOSCALE_PASSWORD: ((db_autoscale_password))
      DB_DIEGO_USERNAME: ((db_diego_username))
      DB_DIEGO_PASSWORD: ((db_diego_password))
      DB_NOTIFICATIONS_USERNAME: ((db_notifications_username))
      DB_NOTIFICATIONS_PASSWORD: ((db_notifications_password))
      DB_ROUTING_USERNAME: ((db_routing_username))
      DB_ROUTING_PASSWORD: ((db_routing_password))
      DB_CCDB_USERNAME: ((db_ccdb_username))
      DB_CCDB_PASSWORD: ((db_ccdb_password))
      DB_ACCOUNTDB_USERNAME: ((db_accountdb_username))
      DB_ACCOUNTDB_PASSWORD: ((db_accountdb_password))
      DB_NETWORKPOLICYSERVERDB_USERNAME: ((db_networkpolicyserverdb_username))
      DB_NETWORKPOLICYSERVERDB_PASSWORD: ((db_networkpolicyserverdb_password))
      DB_NFSVOLUMEDB_USERNAME: ((db_nfsvolumedb_username))
      DB_NFSVOLUMEDB_PASSWORD: ((db_nfsvolumedb_password))
      DB_LOCKET_USERNAME: ((db_locket_username))
      DB_LOCKET_PASSWORD: ((db_locket_password))
      DB_SILK_USERNAME: ((db_silk_username))
      DB_SILK_PASSWORD: ((db_silk_password))
      MYSQL_MONITOR_RECIPIENT_EMAIL: ((mysql_monitor_recipient_email))
      NUM_DIEGO_CELLS: ((num_diego_cells))

  # This task will block if the environment 
  # has been put into stopped state
  - task: wait-if-stopped
    file: automation/lib/tasks/automation/wait-on-state/task.yml
    params: 
      WAIT_ON_STATE: stopped
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))

- name: deploy
  serial_groups: [opsman]
  plan:
  - aggregate:
    - get: automation
    - get: pas-tile
      passed: [configure-srt]
      trigger: true
      params: { globs: [] }

  # Wait if an opsman is currently in the process of apply a change
  - task: wait-if-apply-in-progress
    file: automation/lib/tasks/opsman/wait-opsman/task.yml
    params:
      OPSMAN_HOST: ((opsman_domain_or_ip_address))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))

  # Apply the changes to deploy the SRT
  - task: apply-changes
    file: automation/lib/tasks/opsman/apply-changes/task.yml
    params:
      OPSMAN_HOST: ((opsman_domain_or_ip_address))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      OPSMAN_CLIENT_ID: ((opsman_client_id))
      OPSMAN_CLIENT_SECRET: ((opsman_client_secret))
      DIRECTOR_ONLY:
      DISABLE_ERRANDS:

  # Toggle the environment state to started
  - task: set-started-state
    file: automation/lib/tasks/automation/toggle-state/task.yml
    params: 
      ON_STATE: started
      AUTOS3_URL: ((autos3_url))
      AUTOS3_ACCESS_KEY: ((autos3_access_key))
      AUTOS3_SECRET_KEY: ((autos3_secret_key))
