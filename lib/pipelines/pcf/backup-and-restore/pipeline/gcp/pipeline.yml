---

common:

- &wait-if-stopped
  # This task will block if the environment 
  # has been put into stopped state
  task: wait-if-stopped
  file: automation/lib/inceptor/tasks/wait-on-state/task.yml
  params: 
    WAIT_ON_STATE: stopped
    AUTOS3_URL: ((autos3_url))
    AUTOS3_ACCESS_KEY: ((autos3_access_key))
    AUTOS3_SECRET_KEY: ((autos3_secret_key))

- &backup-restore-common-params
  TRACE: ((trace))
  SSH_KEY: ((ssh_key))
  OPSMAN_HOST: ((opsman_host))
  OPSMAN_USERNAME: ((opsman_username))
  OPSMAN_PASSWORD: ((opsman_password))
  OPSMAN_SSH_USER: ((opsman_ssh_user))
  OPSMAN_SSH_PASSWD: ((opsman_ssh_passwd))
  OPSMAN_DECRYPTION_KEY: ((opsman_pass_phrase))
  OPSMAN_CLIENT_ID: ((pcfops_client))
  OPSMAN_CLIENT_SECRET: ((pcfops_secret))

- &backup-restore-storage-params

  ## Backup storage backend type should be one of 'scp', 's3', 'gcs', 'swift'
  BACKUP_TYPE: ((backup_storage_type))
  BACKUP_TARGET: ((backup_target))
  
  ## Credentials for GCS access
  GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
  GCS_BUCKET_NAME: ((gcs_bucket_name))

  ## GCS mount path
  GCS_MOUNT: ((gcs_mount))

jobs:

#
# Backup Pivotal Ops Manager and Cloud Foundry
#

- name: backup-pcf
  serial: true
  serial_groups: [backups]
  on_failure:
    do:
    - task: notify on backup-pcf failure
  plan:

  - aggregate:
    - get: automation
    - get: daily
      trigger: true

  - *wait-if-stopped
  
  - task: prepare-backup
    privileged: true
    file: automation/lib/pipelines/pcf/backup-and-restore/tasks/prepare-opsman-backup/task.yml
    params: 
      <<: *backup-restore-common-params
      <<: *backup-restore-storage-params

  - aggregate:

    - task: backup-opsman
      privileged: true
      file: automation/lib/pipelines/pcf/backup-and-restore/tasks/backup-opsman/task.yml
      params: 
        <<: *backup-restore-common-params
        <<: *backup-restore-storage-params

    - task: backup-director
      privileged: true
      file: automation/lib/tasks/bbr/backup-director/task.yml
      params: 
        <<: *backup-restore-common-params
        <<: *backup-restore-storage-params

    - task: backup-pas-tile
      privileged: true
      file: automation/lib/tasks/bbr/backup-pas/task.yml
      params: 
        <<: *backup-restore-common-params
        <<: *backup-restore-storage-params

  - task: cleanup
    privileged: true
    file: automation/lib/tasks/bbr/cleanup/task.yml
    params: 
      <<: *backup-restore-common-params
      <<: *backup-restore-storage-params

#
# Restore Ops Manager by importing backed up installation export 
# archive followed by director before apply all changes
#

- name: restore-ops-manager
  serial: true
  serial_groups: [backups]
  plan:

  - aggregate:
    - get: automation

  - task: import-ops-manager-backup
    privileged: true
    file: automation/lib/pipelines/pcf/backup-and-restore/tasks/restore-opsman/task.yml
    params: 
      <<: *backup-restore-common-params
      <<: *backup-restore-storage-params
      PIVNET_API_TOKEN: ((pivnet_api_token))

  - task: restore-director
    privileged: true
    file: automation/lib/tasks/bbr/restore-director/task.yml
    params: 
      <<: *backup-restore-common-params
      <<: *backup-restore-storage-params

  - task: apply-changes
    privileged: true
    file: automation/lib/tasks/opsman/apply-changes/task.yml
    params: 
      <<: *backup-restore-common-params

#
# Restore Elastic Runtime
#

- name: restore-elastic-runtime
  serial: true
  serial_groups: [backups]
  on_failure:
    do:
    - task: notify on restore-elastic-runtime failure
  plan:

  - aggregate:
    - get: automation

  - task: prepare-opsman-restore
    privileged: true
    file: automation/lib/pipelines/pcf/backup-and-restore/tasks/prepare-opsman-restore/task.yml
    params: 
      <<: *backup-restore-common-params
      <<: *backup-restore-storage-params

  - task: restore-pas
    privileged: true
    file: automation/lib/tasks/bbr/restore-pas/task.yml
    params: 
      <<: *backup-restore-common-params
      <<: *backup-restore-storage-params

resources:

- name: automation
  type: git
  source:
    uri: ((automation_pipelines_repo))
    branch: ((automation_pipelines_branch))

- name: daily
  type: time
  source:
    interval: ((backup_interval))
    location: ((locale))
    start: ((backup_interval_start))
    stop: ((backup_interval_stop))
